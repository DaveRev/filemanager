[
  {
    "tags": [
      {
        "type": "author",
        "string": "thomas appel <mail@thomas-appel.com>"
      },
      {
        "type": "requires",
        "string": "jquery underscore backbone collections/col_general"
      },
      {
        "type": "",
        "string": ""
      },
      {
        "type": "Displays",
        "string": "<a href=\"http://opensource.org/licenses/gpl-3.0.html\">GNU Public License</a>"
      },
      {
        "type": "license",
        "string": "http://opensource.org/licenses/gpl-3.0.html GNU Public License"
      }
    ],
    "description": {
      "full": "<p>@package Collections</p>",
      "summary": "<p>@package Collections</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "(function (define, Symphony) {\n\t// body\n\tdefine([\n\t\t'jquery',\n\t\t'underscore',\n\t\t'backbone',\n\t\t'collections/col_general'\n\t], function ($, _, Backbone, General) {\n\n\t\tvar _schemes = {},\n\t\tFile, Files, Directory, Directories,\n\n\t\tEXP_CS_LIST = /,+\\s+/g;"
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "augments",
        "otherClass": "Backbone.Model"
      }
    ],
    "description": {
      "full": "<p>@class File</p>",
      "summary": "<p>@class File</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "File = (function () {\n\t\t\treturn Backbone.Model.extend({\n\t\t\t\tinitialize: function (attributes, options) {\n\t\t\t\t\tif (options.dir) {\n\t\t\t\t\t\tthis.set({dir: options.dir}, {silent: true});\n\t\t\t\t\t}\n\t\t\t\t\tthis.set({'id': _.uniqueId()}, {silent: true});\n\t\t\t\t}\n\t\t\t});\n\t\t}());"
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "augments",
        "otherClass": "Backbone.Collection"
      }
    ],
    "description": {
      "full": "<p>@class Files</p>",
      "summary": "<p>@class Files</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Files = (function () {\n\t\t\treturn Backbone.Collection.extend({\n\n\t\t\t\tmodel: File,\n\t\t\t\tgetByFileName: function (fnames) {\n\t\t\t\t\tfnames = _.isArray(fnames) ? fnames : fnames.replace(EXP_CS_LIST, ',').split(',');\n\t\t\t\t\treturn _.filter(this.models, function (file) {\n\t\t\t\t\t\treturn _.indexOf(fnames, file.get('path')) >= 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}());"
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "augments",
        "otherClass": "Backbone.Model"
      }
    ],
    "description": {
      "full": "<p>@class Directory</p>",
      "summary": "<p>@class Directory</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Directory = (function () {\n\n\t\t\tfunction _reportState() {\n\t\t\t\tthis.collection.setSchemeState(this);\n\t\t\t}\n\t\t\tfunction _setNestingLevel(dir, parent) {\n\t\t\t\tdir.set('level', parent && parent.get('level') + 1 || 0);\n\t\t\t}\n\n\t\t\tfunction _setParent() {\n\t\t\t\tvar parent;\n\n\t\t\t\tif (!!this.get('_parent')) {\n\t\t\t\t\tparent = this.collection.get(this.get('_parent'));\n\t\t\t\t\tthis.set('parent', parent);\n\t\t\t\t}\n\t\t\t\t//_setNestingLevel(this, parent);\n\n\t\t\t\tthis.collection.off('add reset', this._setParent);\n\t\t\t\tdelete this._setParent;\n\t\t\t}\n\t\t\tfunction _setSub() {\n\t\t\t\tvar parent = this.get('parent');\n\t\t\t\tif (!!parent) {\n\t\t\t\t\t//parent.get('subdirs').pop();\n\t\t\t\t\tparent.get('subdirs').push(this);\n\t\t\t\t}\n\t\t\t\t//this.collection.off('add', this._setSub);\n\t\t\t\t//delete this._setSub;\n\t\t\t}\n\n\t\t\tfunction _selfRemove(silent, collection, options) {\n\t\t\t\toptions = options || {};\n\t\t\t\tcollection = this.collection || collection;\n\t\t\t\tcollection.remove(this, _.extend(options, {silent: silent}));\n\t\t\t}\n\n\t\t\tfunction _clearSubDirs(collection, dir, oldc, options) {\n\t\t\t\tvar files;\n\t\t\t\tif (dir === this) {\n\t\t\t\t\tfiles = this.get('files');\n\t\t\t\t\tif (files) {\n\t\t\t\t\t\tfiles.remove(files.models);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.get('subdirs')) {\n\t\t\t\t\t\t_.each(this.get('subdirs'), function (dir) {\n\t\t\t\t\t\t\t_selfRemove.call(dir, false, collection, options);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _getSubDirs(res) {\n\t\t\t\tvar dir = this,\n\t\t\t\tsubdirs = dir.get('subdirs');\n\n\t\t\t\tif (subdirs) {\n\t\t\t\t\t_.each(subdirs, function (d) {\n\t\t\t\t\t\tres.push(d);\n\t\t\t\t\t\t_getSubDirs.call(d, res);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Backbone.Model.extend({\n\t\t\t\tdefaults: {\n\t\t\t\t\tname: '',\n\t\t\t\t\t_parent: null,\n\t\t\t\t\tpath: null,\n\t\t\t\t\tstate: 'close'\n\t\t\t\t},\n\n\t\t\t\tinitialize: function (data, options) {\n\t\t\t\t\tvar that = this;\n\t\t\t\t\t//this._setParent = _.bind(_setParent, this);\n\t\t\t\t\t//this._setSub = _.bind(_setSub, this);\n\t\t\t\t\tthis.collection.on('remove', _.bind(_clearSubDirs, this, this.collection));\n\t\t\t\t\t\t//.on('add reset', this._setParent)\n\t\t\t\t\t\t//.on('add reset', this._setSub)\n\n\n\t\t\t\t\tthis.on('change:state', _.bind(_reportState, this));\n\t\t\t\t\tthis.on('change:parent', _.bind(_setSub, this));\n\t\t\t\t\tthis.set('state', this.collection.getSchemeStateByPath(this));\n\t\t\t\t\t//_setParent.call(this);\n\t\t\t\t\t//_setSub.call(this);\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "response",
        "description": "response Object from the server"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "all subdir nested Models"
      }
    ],
    "description": {
      "full": "<p>parse raw server response<br />checks if the response has files and turns them into a collection</p>",
      "summary": "<p>parse raw server response<br />checks if the response has files and turns them into a collection</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "parse: function (response) {\n\t\t\t\t\tvar files;\n\t\t\t\t\tif (response.files && _.isArray(response.files)) {\n\t\t\t\t\t\tfiles = new Files();\n\t\t\t\t\t\tfiles.add(response.files, {dir: this});\n\t\t\t\t\t\tresponse.files = files;\n\t\t\t\t\t}\n\t\t\t\t\treturn response;\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "self",
        "description": "include this directory in result array"
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "all subdir nested Models"
      }
    ],
    "description": {
      "full": "<p>get all nested Subdirectories</p>",
      "summary": "<p>get all nested Subdirectories</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "getSubDirs: function (self) {\n\t\t\t\t\tvar res = self ? [this] : [];\n\t\t\t\t\t_getSubDirs.call(this, res);\n\t\t\t\t\treturn res;\n\t\t\t\t},\n\t\t\t\tgetByFileName: function (fnames) {\n\t\t\t\t\tif (this.get('files')) {\n\t\t\t\t\t\treturn this.get('files').getByFileName(fnames);\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t});\n\t\t} ());\n\n\t\t// DIRECTORY COLLECTION\n\t\t// =================================================================="
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "augments",
        "otherClass": "Backbone.Collection"
      }
    ],
    "description": {
      "full": "<p>@class Directories</p>",
      "summary": "<p>@class Directories</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Directories = (function () {\n\t\t\tfunction _createScheme() {\n\t\t\t\tvar scheme;\n\t\t\t\tif (_schemes[this.cid]) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tscheme = _schemes[this.cid] = {};\n\t\t\t\t}\n\t\t\t\t_.each(this.models, function (model) {\n\t\t\t\t\tscheme[model.get('path')] = {\n\t\t\t\t\t\tstate: 'close'\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t}"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>function _parse(dir, res, isroot) {<br />                var that = this, uuid, subdir;</p>\n\n<pre><code>            if (dir.directory) {\n                return _parse.call(this, dir.directory, res);\n            }\n\n            uuid = dir.id ? dir.id : 'dir' + _.uniqueId();\n            dir._parent = dir._parent;\n            dir.id = uuid;\n            res.push(dir);\n\n            if (dir.subdirs) {\n                while (dir.subdirs.length) {\n                    subdir = dir.subdirs.shift();\n                    subdir.directory._parent = uuid;\n                    _parse.call(this, subdir, res);\n                }\n            }\n\n            return res;\n        }\n</code></pre>",
      "summary": "<p>function _parse(dir, res, isroot) {<br />                var that = this, uuid, subdir;</p>",
      "body": "<pre><code>            if (dir.directory) {\n                return _parse.call(this, dir.directory, res);\n            }\n\n            uuid = dir.id ? dir.id : 'dir' + _.uniqueId();\n            dir._parent = dir._parent;\n            dir.id = uuid;\n            res.push(dir);\n\n            if (dir.subdirs) {\n                while (dir.subdirs.length) {\n                    subdir = dir.subdirs.shift();\n                    subdir.directory._parent = uuid;\n                    _parse.call(this, subdir, res);\n                }\n            }\n\n            return res;\n        }\n</code></pre>"
    },
    "ignore": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "Directories#_parse"
      },
      {
        "type": "",
        "string": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "dir",
        "description": "a directory object"
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "res",
        "description": "the array to populate with directory objects"
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "isroot",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "",
        "string": ""
      },
      {
        "type": "private",
        "string": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>takes nested directory models from the raw server response an<br />parese them in an unnseted array.</p>\n\n<p>Here, each directory gets a unique identifyer<br />If a directory has subdirectories, each subdirectory will get<br />a property called <code>_parent</code> with the value og its parent id</p>",
      "summary": "<p>takes nested directory models from the raw server response an<br />parese them in an unnseted array.</p>",
      "body": "<p>Here, each directory gets a unique identifyer<br />If a directory has subdirectories, each subdirectory will get<br />a property called <code>_parent</code> with the value og its parent id</p>"
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _parse(dir, res, isroot) {\n\t\t\t\tvar that = this, uuid, subdir;\n\n\t\t\t\tif (dir.directory) {\n\t\t\t\t\treturn _parse.call(this, dir.directory, res);\n\t\t\t\t}\n\n\t\t\t\tuuid = dir.id ? dir.id : 'dir' + _.uniqueId();\n\t\t\t\tdir._parent = dir._parent;\n\t\t\t\t//dir.parent = dir.parent;\n\t\t\t\tdir.id = uuid;\n\t\t\t\tres.push(dir);\n\n\t\t\t\tif (dir.subdirs) {\n\t\t\t\t\twhile (dir.subdirs.length) {\n\t\t\t\t\t\tsubdir = dir.subdirs.shift();\n\t\t\t\t\t\tsubdir.directory._parent = uuid;\n\t\t\t\t\t\t//subdir.directory.parent = dir;\n\t\t\t\t\t\t_parse.call(this, subdir, res);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\n\t\t\tfunction _update(data, options) {\n\t\t\t\toptions = options || {};\n\t\t\t\toptions.success = options.success || function () {};\n\t\t\t\toptions.error = options.error || function () {};\n\t\t\t\t//options.parse = options.parse || this.parse;\n\t\t\t\treturn $.ajax({\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\turl: this.url,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tdata: _.extend({\n\t\t\t\t\t\tfield_id: this.settings.field_id\n\t\t\t\t\t}, data),\n\t\t\t\t\tsuccess: options.success,\n\t\t\t\t\terror: options.error,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction _prepareUpdateResponse(dir, options, resp) {\n\t\t\t\tvar res,\n\t\t\t\tremoveDirs = dir.getSubDirs(true);\n\n\t\t\t\toptions = options || {};\n\n\t\t\t\tresp.directory._parent = dir.get('_parent');\n\t\t\t\tresp.directory.id = dir.id;\n\t\t\t\tresp.directory.cid = dir.cid;\n\n\t\t\t\t// subdirs will automatically remove them self when an remove\n\t\t\t\t// event is triggered. We won't notify any one else than the\n\t\t\t\t// subdirs itself, so we remove them all together with option\n\t\t\t\t// silent\n\n\t\t\t\tthis.remove(removeDirs, {silent: true});\n\t\t\t\tres = this.parse(resp);\n\t\t\t\tthis.add(res, {parse: true});\n\t\t\t\t!options.silent && this.trigger('update', this.get(dir.id));\n\t\t\t}\n\n\t\t\tfunction _schemeExists(id) {\n\t\t\t\treturn !!_schemes[id];\n\t\t\t}\n\n\t\t\treturn General.extend({\n\t\t\t\turl: Symphony.Context.get('root') + '/symphony/extension/filemanager/listing/',\n\n\t\t\t\tmodel: Directory,\n\n\t\t\t\t// factories\n\t\t\t\t// ===========================================================================\n\t\t\t\tinitialize: function () {\n\t\t\t\t\tthis.cid = this.cid || 'c' + _.uniqueId();\n\t\t\t\t\tthis.on('reset', function () {\n\t\t\t\t\t});\n\t\t\t\t\tthis.on('add', function () {\n\t\t\t\t\t});\n\n\t\t\t\t\twindow.DIRS = this;\n\t\t\t\t\t// Assign the Deferred issued by fetch() as a property\n\t\t\t\t},\n\n\t\t\t\tpopulate: function () {\n\t\t\t\t\tthis.deferred = this.fetch({\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t'field_id': this.settings.field_id || 0\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.deferred.done(_.bind(_createScheme, this));\n\t\t\t\t},\n\n\t\t\t\tparse: function (response) {\n\n\t\t\t\t\tvar dirs = this, parsed =  _parse.call(this, response, []),\n\t\t\t\t\tout = _.map(parsed, function (dir) {\n\t\t\t\t\t\tdir = new Directory(dir, {collection: dirs, parse: true});\n\t\t\t\t\t\treturn dir;\n\t\t\t\t\t});\n\t\t\t\t\t_.each(out, function (dir) {\n\t\t\t\t\t\tvar parentId = dir.get('_parent'),\n\t\t\t\t\t\tparent = _.find(out, function (parent) {\n\t\t\t\t\t\t\treturn parent.get('id') === parentId;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdir.set({parent: parent});\n\t\t\t\t\t});\n\t\t\t\t\treturn out;\n\t\t\t\t},\n\n\t\t\t\t// utilities:\n\t\t\t\t// ===========================================================================\n\t\t\t\tsetScheme: function (scheme) {\n\t\t\t\t\t_schemes[this.cid] = scheme;\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\tchangeScheme: function () {\n\t\t\t\t\tif (!_schemeExists(this.cid)) {\n\t\t\t\t\t\t_createScheme.call(this);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tsetSchemeState: function (model, state) {\n\t\t\t\t\tvar path = model.get('path');\n\t\t\t\t\tif (_schemes[this.cid][path]) {\n\t\t\t\t\t\t_schemes[this.cid][path].state = model.get('state') ? model.get('state') : 'close';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetSchemeStateByPath: function (model) {\n\t\t\t\t\tif (_schemeExists(this.cid) && _schemes[this.cid][model.get('path')]) {\n\t\t\t\t\t\treturn _schemes[this.cid][model.get('path')].state;\n\t\t\t\t\t}\n\t\t\t\t\treturn 'close';\n\t\t\t\t},\n\n\t\t\t\t// iterators:\n\t\t\t\t// ===========================================================================\n\t\t\t\tgetFile: function (fileId, dirId) {\n\t\t\t\t\tvar files = this.getFiles(dirId),\n\t\t\t\t\tfile;\n\n\t\t\t\t\tif (!_.isArray(files)) {\n\t\t\t\t\t\treturn files.get(fileId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfile = _.find(files, function (fs) {\n\t\t\t\t\t\t\treturn fs.get(fileId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn file;\n\t\t\t\t},\n\n\t\t\t\tgetFiles: function (id) {\n\t\t\t\t\tif (id) {\n\t\t\t\t\t\treturn this.get(id).get('files');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.pluck('files');\n\t\t\t\t},\n\n\t\t\t\tgetFileById: function (id) {\n\t\t\t\t\tid = parseInt(id, 10);\n\t\t\t\t\tvar files = this.getFiles();\n\n\t\t\t\t\tvar file = _.find(files, function (f) {\n\t\t\t\t\t\treturn f.get(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn file.get(id);\n\t\t\t\t},",
    "ctx": {
      "type": "function",
      "name": "_parse",
      "string": "_parse()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Mixed"
        ],
        "name": "fnames",
        "description": "string or array"
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "returns found file models"
      }
    ],
    "description": {
      "full": "<p>retrieve File Models be their pathnames<br />takes an array of pathsnames or String as commy separated list</p>",
      "summary": "<p>retrieve File Models be their pathnames<br />takes an array of pathsnames or String as commy separated list</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "getByFileName: function (fnames) {\n\t\t\t\t\tvar files = this.getFiles(),\n\t\t\t\t\tresult = [];\n\n\t\t\t\t\tif (!_.isArray(fnames)) {\n\t\t\t\t\t\tfnames = fnames.replace(EXP_CS_LIST, ',').split(','); //allow comma separated lists\n\t\t\t\t\t}\n\t\t\t\t\t_.each(files, function (file) {\n\t\t\t\t\t\tif (file) {\n\t\t\t\t\t\t\tvar model = _.filter(file.models, function (m) {\n\t\t\t\t\t\t\t\treturn _.include(fnames, m.attributes.path);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tmodel.length && result.push(model);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn _.flatten(result);\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Backbone.Model"
        ],
        "name": "instance}",
        "description": "dir Directory which should"
      },
      {
        "type": "be",
        "string": "uodated"
      }
    ],
    "description": {
      "full": "<p>Update attributes of a directory</p>",
      "summary": "<p>Update attributes of a directory</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "updateDir: function (dir, options) {\n\t\t\t\t\tvar d = _update.call(this, {\n\t\t\t\t\t\t'select': dir.get('path')\n\t\t\t\t\t})\n\t\t\t\t\t .done(_.bind(_prepareUpdateResponse, this, dir, options))\n\t\t\t\t\t .fail();\n\t\t\t\t\treturn d;\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": "name for new directory"
      },
      {
        "type": "param",
        "types": [
          "Backbone.Model"
        ],
        "name": "instance}",
        "description": "parent Directory in which"
      },
      {
        "type": "the",
        "string": "new one will be created"
      }
    ],
    "description": {
      "full": "<p>Create a new directory on the server</p>",
      "summary": "<p>Create a new directory on the server</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "createDir: function (name, parent) {\n\t\t\t\t\tparent = this.get(parent.id) || undefined;\n\t\t\t\t\tif (!parent) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar url = this.url.replace(/listing\\/$/, 'edit/'),\n\t\t\t\t\tconf = {\n\t\t\t\t\t\tmkdir: name,\n\t\t\t\t\t\twithin: parent.get('path'),\n\t\t\t\t\t\ttype: 'create'\n\t\t\t\t\t};\n\n\t\t\t\t\treturn $.ajax({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\ttype: 'post',\n\t\t\t\t\t\tdata: conf,\n\t\t\t\t\t\tdataType: 'json',\n\t\t\t\t\t\tsuccess: _.bind(this.updateDir, this, parent)\n\t\t\t\t\t});\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "conf",
        "description": "the configuration object containing"
      },
      {
        "type": "a",
        "string": "file and a type property"
      }
    ],
    "description": {
      "full": "<p>Moves a file or directory model to a new location</p>",
      "summary": "<p>Moves a file or directory model to a new location</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "moveItem: function (conf) {\n\t\t\t\t\tvar that = this,\n\t\t\t\t\tsource = this.get(conf.source),\n\t\t\t\t\tdestination = this.get(conf.destination),\n\t\t\t\t\titem = conf.file ? this.getFile(conf.file, source.id) : source,\n\t\t\t\t\tdata = {\n\t\t\t\t\t\tfrom: item.get('path'),\n\t\t\t\t\t\tto: destination.get('path'),\n\t\t\t\t\t\ttype: 'move',\n\t\t\t\t\t\tdataType: conf.type\n\t\t\t\t\t},\n\t\t\t\t\turl = this.url.replace(/listing\\/$/, 'edit/');\n\t\t\t\t\treturn $.ajax({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\ttype: 'post',\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tdataType: 'json',\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tif (conf.type === 'file') {\n\t\t\t\t\t\t\t\titem.collection.remove(item);\n\t\t\t\t\t\t\t\tthat.trigger('moved', source);\n\t\t\t\t\t\t\t\t//that.updateDir(source);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.remove(source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthat.updateDir(destination);\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\terror: function () {}\n\t\t\t\t\t});\n\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "fragment",
        "description": "the searchstring"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "attrib",
        "description": "file model attribute to search for"
      },
      {
        "type": "param",
        "types": [
          "Integer"
        ],
        "name": "min",
        "description": "minmum searchstring length (defaults to 3)"
      },
      {
        "type": "",
        "string": ""
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "the result array"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Takes a string (filename or fragment of a fileattribute) and<br />returns all matched file models (by given attribute or<br />filename (default)</p>",
      "summary": "<p>Takes a string (filename or fragment of a fileattribute) and<br />returns all matched file models (by given attribute or<br />filename (default)</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "searchFiles: function (fragment, attrib, min) {\n\t\t\t\t\tvar filegrp = [],\n\t\t\t\t\tres = [],\n\t\t\t\t\ti = 0, l,\n\t\t\t\t\tEXP = new RegExp(fragment);\n\n\t\t\t\t\tif (!fragment || fragment.length < (min || 3)) {\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\n\t\t\t\t\tattrib = attrib || 'file';\n\n\t\t\t\t\t_.each(_.compact(this.pluck('files')), function (files) {\n\t\t\t\t\t\tfilegrp.push(files.models);\n\t\t\t\t\t});\n\t\t\t\t\tfilegrp = _.flatten(filegrp);\n\n\t\t\t\t\tl = filegrp.length;\n\t\t\t\t\tfor (;i < l; i++) {\n\t\t\t\t\t\tif (!filegrp || !filegrp[i].get(attrib).match(EXP)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres.push(filegrp[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn res;\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Backbone.Model"
        ],
        "name": "instance}",
        "description": "file the model to be removd"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "type",
        "description": "accepts 'file' or 'dir'"
      }
    ],
    "description": {
      "full": "<p>Delete a directory or file from its collection</p>",
      "summary": "<p>Delete a directory or file from its collection</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "deleteItem: function (file, type) {\n\t\t\t\t\tvar url = this.url.replace(/listing\\/$/, 'edit/'),\n\t\t\t\t\tcol = this,\n\t\t\t\t\tdirectory,\n\t\t\t\t\tcanDelete = $.Deferred();\n\t\t\t\t\tconsole.log(file, 'file');\n\t\t\t\t\tif (type !== 'file') {\n\t\t\t\t\t\tthis.trigger('beforedirectorydelete', canDelete);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcanDelete.resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $.ajax({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\ttype: 'post',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\ttype: 'delete',\n\t\t\t\t\t\t\tfile: file.get('path')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdataType: 'json',\n\t\t\t\t\t\tsuccess: function () {\n\t\t\t\t\t\t\tif (type !== 'file') {\n\t\t\t\t\t\t\t\tcol.remove(file);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfile.collection.remove(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcol.trigger('itemdelete', file.get('id'), type); // this will be removed\n\t\t\t\t\t\t\tcol.trigger('delete', type === 'file' ? file.get('dir') : file.get('parent'));\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function () {}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t} ());\n\t\treturn Directories;\n\t});\n} (this.define, this.Symphony));"
  }
]
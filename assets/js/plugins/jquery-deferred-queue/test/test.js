$(document).ready(function(){var a=function(){setTimeout(function(){ok(d),start()})},b=function(){setTimeout(function(){ok(e),ok(!d),start()})},c=function(a){return a.then(function(){d=!0},function(){e=!0})},d,e,f;module("Basic usage",{setup:function(){d=!1,e=!1,f=$.Deferred.queue()}}),test("Queue creation",function(){ok(f.push),ok(f.then),ok(f.done),ok(f.fail)}),asyncTest("Adding a deferred to the queue",1,function(){var b=$.Deferred();c(f.push(b.promise())),b.resolve(),a()}),asyncTest("Rejecting a deferred in the queue",2,function(){var a=$.Deferred();c(f.push(a.promise())),a.reject(),b()}),asyncTest("Adding more than one deferred",1,function(){var b=$.Deferred(),d=$.Deferred(),e=$.Deferred();c(f.push(b.promise()).push(d.promise()).push(e.promise())),b.resolve(),d.resolve(),e.resolve(),a()}),asyncTest("Push multiple deferreds a in a single call",1,function(){var b=$.Deferred(),d=$.Deferred(),e=$.Deferred();c(f.push(b.promise(),d.promise(),e.promise())),b.resolve(),d.resolve(),e.resolve(),a()}),asyncTest("Rejecting one of several deferreds",2,function(){var a=$.Deferred(),d=$.Deferred(),e=$.Deferred();c(f.push(a.promise()).push(d.promise()).push(e.promise())),a.resolve(),d.reject(),e.resolve(),b()}),asyncTest("Rejecting one of several deferreds - simult",2,function(){var a=$.Deferred(),d=$.Deferred(),e=$.Deferred();c(f.push(a.promise(),d.promise(),e.promise())),a.resolve(),d.reject(),e.resolve(),b()}),asyncTest("Accept non-promises as well",1,function(){var b=$.Deferred(),d=3;c(f.push(b).push(3)),b.resolve(),a()}),asyncTest("Add stuff to the constructor itself",1,function(){var b=$.Deferred(),d=3,e=$.Deferred(),f=c($.Deferred.queue(b,d,e));b.resolve(),e.resolve(),a()}),asyncTest("My constructor is full of eels",2,function(){var a=$.Deferred(),d=$.Deferred(),e=$.Deferred(),f=c($.Deferred.queue(a.promise(),d.promise(),e.promise()));a.resolve(),d.reject(),e.resolve(),b()}),asyncTest("Stack new deferred in the deferred",1,function(){var b=[$.Deferred().then(function(){f.push(b[1],b[2])}),$.Deferred().then(function(){f.push(b[3])}),$.Deferred(),$.Deferred().then(function(){f.push(b[4])}),$.Deferred()];c(f.push(b[0])),b[2].resolve(),b[1].resolve(),b[3].resolve(),b[0].resolve(),b[4].resolve(),a()}),asyncTest("Adding objects to a resolved queue is an error",2,function(){var a=$.Deferred();c(f.push(a.promise())),a.resolve(),setTimeout(function(){ok(d),raises(function(){f.push($.Deferred().promise())}),start()})})})
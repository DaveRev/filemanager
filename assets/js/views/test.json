[
  {
    "tags": [
      {
        "type": "augments",
        "otherClass": "Backbone.View"
      },
      {
        "type": "class",
        "string": "FileView"
      },
      {
        "type": "constructor",
        "string": ""
      }
    ],
    "description": {
      "full": "<h2>SINGLE FILE</h2>",
      "summary": "<h2>SINGLE FILE</h2>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "FileView = (function () {\n\t\t\tfunction _fileSelfRemove(model) {\n\t\t\t\tvar meta, dirPath;\n\t\t\t\tif (model === this.model) {\n\t\t\t\t\tif (this._metaView) {\n\t\t\t\t\t\tmeta = this._metaView;\n\t\t\t\t\t\tdirPath = model.get('dir').get('path');\n\t\t\t\t\t\tthis._metaView.close(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Backbone.View.extend({\n\t\t\t\tinitialize: function () {\n\t\t\t\t\tthis.model.collection.on('remove', _.bind(_fileSelfRemove, this));\n\t\t\t\t\t//this.model.get('dir').collection.on('update', _.bind(_metaViewPersistance, this));\n\t\t\t\t},\n\t\t\t\trender: function (settings) {\n\t\t\t\t\tsettings = settings || {};\n\t\t\t\t\tvar view = this,\n\t\t\t\t\tcompiled = templates.files(_.extend(this.model.toJSON(), {\n\t\t\t\t\t\tsettings: settings\n\t\t\t\t\t}));\n\t\t\t\t\tthis.el.innerHTML += compiled;\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tview.$el.find('#preview-' + view.model.id).on('click.file', _.bind(view.showMetaInfo, view));\n\t\t\t\t\t},\n\t\t\t\t\t0);\n\t\t\t\t},\n\n\t\t\t\tshowMetaInfo: function (event) {\n\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\n\t\t\t\t\tvar file = this.model.get('path'),\n\t\t\t\t\tdirView = this.dirView,\n\t\t\t\t\tmeta,\n\t\t\t\t\topen,\n\t\t\t\t\tclose,\n\t\t\t\t\tpercist,\n\t\t\t\t\tid = dirView.model.collection.cid;\n\n\t\t\t\t\tif (!this._metaView) {\n\t\t\t\t\t\tmeta = this._metaView = MetaView.makeView.call(this);\n\t\t\t\t\t}\n\t\t\t\t\tmeta.on('open', function () {\n\t\t\t\t\t\tmetaStates[id][file] = true;\n\t\t\t\t\t}).on('close', function () {\n\t\t\t\t\t\tdelete metaStates[id][file];\n\t\t\t\t\t});\n\t\t\t\t\tmeta.open();\n\t\t\t\t\t//var model = parseInt(e.target.id.split('preview-'), 10);\n\t\t\t\t}\n\n\t\t\t});\n\t\t} ());\n\n// =================================================================="
  },
  {
    "tags": [
      {
        "type": "class",
        "string": "DirView"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "augments",
        "otherClass": "Backbone.View"
      }
    ],
    "description": {
      "full": "<h2>SINGLE DIRECTORY VIEW</h2>",
      "summary": "<h2>SINGLE DIRECTORY VIEW</h2>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "// ==================================================================\n\t\tDirView = (function () {\n\t\t\tvar _tasks = 'upload create move delete'.split(' ');\n\n\t\t\tfunction _enableTask(task, dir) {\n\t\t\t\tthis._tasks[task] && this._tasks[task].removeClass('disabled');\n\t\t\t}\n\n\t\t\tfunction _disableTask(task, dir) {\n\t\t\t\tthis._tasks[task] && this._tasks[task].addClass('disabled');\n\t\t\t}\n\n\t\t\tfunction _setTasks() {\n\t\t\t\tvar a = {},\n\t\t\t\ttb = this.$el.find('.toolbar:first');\n\t\t\t\t_.each(_tasks, function (task) {\n\t\t\t\t\tvar n = tb.find('.' + task);\n\t\t\t\t\tif (n.length) {\n\t\t\t\t\t\ta[task] = n;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._tasks = a;\n\t\t\t}\n\n\t\t\treturn Backbone.View.extend({\n\t\t\t\tevents: {\n\t\t\t\t\t//\t'click.dirview  .dir-header:first': '_toggle'\n\t\t\t\t},\n\n\t\t\t\tinitialize: function () {\n\t\t\t\t\tvar dir = this;\n\t\t\t\t\tthis.fileViews = [];\n\t\t\t\t\tthis._files = {};\n\t\t\t\t\tthis.on('enabletask', _.bind(_enableTask, this)).on('disabletask', _.bind(_disableTask, this));\n\t\t\t\t},\n\n\t\t\t\trender: function (dirSettings, fileSettings, update) {\n\n\t\t\t\t\tvar that = this,\n\t\t\t\t\tsettings = _.clone(dirSettings),\n\t\t\t\t\tparent,\n\t\t\t\t\tpm = this.model.get('parent'),\n\t\t\t\t\tfiles = this.model.get('files'),\n\t\t\t\t\tul;\n\n\t\t\t\t\tthis.$el.html(templates.dirs(_.extend(this.model.toJSON(), {\n\t\t\t\t\t\tsettings: _.extend(settings, fileSettings)\n\t\t\t\t\t})));\n\n\t\t\t\t\tul = this.$el.find('#sub-' + this.model.id);\n\n\t\t\t\t\tif (files) {\n\t\t\t\t\t\tfiles.on('remove', _.bind(that.model.collection.trigger, that.model.collection, 'remove'));\n\t\t\t\t\t\tfiles.each(function (file) {\n\t\t\t\t\t\t\tvar fv = new FileView({\n\t\t\t\t\t\t\t\tel: ul,\n\t\t\t\t\t\t\t\tmodel: file\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tfv.dirView = that;\n\t\t\t\t\t\t\tthat._files[file.get('path')] = fv;\n\t\t\t\t\t\t\tthat.fileViews.push(fv);\n\t\t\t\t\t\t\tfv.render(fileSettings);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tparent = pm ? document.getElementById('sub-' + pm.id) : document.getElementById('dir-list-root');\n\t\t\t\t\tparent && ! update && this.$el.appendTo(parent);\n\t\t\t\t\t_setTasks.call(this);\n\n\t\t\t\t\tthis.model.get('state') === 'open' && this.$el.addClass(this.model.get('state'));\n\n\t\t\t\t\tif (update) {\n\t\t\t\t\t\tthis.trigger('update', this);\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tgetFileByPath: function (path) {\n\t\t\t\t\treturn this._files[path];\n\t\t\t\t},\n\t\t\t\tgetSubDirs: function () {\n\t\t\t\t\tvar subs = this.model.get('subdirs');\n\t\t\t\t\tconsole.log(subs);\n\t\t\t\t}\n\t\t\t});\n\t\t} ());"
  },
  {
    "tags": [
      {
        "type": "augments",
        "otherClass": "Backbone.View"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "class",
        "string": "TreeView"
      }
    ],
    "description": {
      "full": "<h2>DIRECTORY TREE VIEW</h2>",
      "summary": "<h2>DIRECTORY TREE VIEW</h2>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "TreeView = (function () {"
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _select(e, type) {\n\t\t\t\tvar target = $(e.target);\n\t\t\t\tvar fileNode = target.parent();\n\t\t\t\tif (type === 'add') {\n\t\t\t\t\tfileNode.addClass('selected');\n\t\t\t\t} else if (type === 'remove') {\n\t\t\t\t\tfileNode.removeClass('selected');\n\t\t\t\t}\n\t\t\t\tthis.trigger('select', type, this.getFile(fileNode).toJSON());\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_select",
      "string": "_select()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@private</p>",
      "summary": "<p>@private</p>",
      "body": ""
    },
    "ignore": false,
    "code": "function _removeItemNode(id, type) {\n\t\t\t\tif (!this instanceof Backbone.View) {\n\t\t\t\t\tthrow ('function called with wrong context');\n\t\t\t\t}\n\t\t\t\tvar node = type === 'file' ? $('#file-' + id) : $('#' + id),\n\t\t\t\tmoveable = $([node, node.find('.dir-header')]).filter(function () {\n\t\t\t\t\treturn this.data('draggable') || this.data('droppable');\n\t\t\t\t});\n\n\t\t\t\tif (this.dirViews[id]) {\n\t\t\t\t\tdelete this.dirViews[id];\n\t\t\t\t}\n\t\t\t\tnode.detach();\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tnode.remove();\n\t\t\t\t},\n\t\t\t\t100);\n\t\t\t\treturn this;\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_removeItemNode",
      "string": "_removeItemNode()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@private</p>",
      "summary": "<p>@private</p>",
      "body": ""
    },
    "ignore": false,
    "code": "function _removeItem(model, cols, options) {\n\t\t\t\tvar isDir = /dir/.test(model.id);\n\t\t\t\tif (!isDir) {\n\t\t\t\t\tthis.trigger('select', 'remove', model.toJSON());\n\t\t\t\t}\n\t\t\t\treturn _removeItemNode.call(this, model.id, isDir ? 'dir': 'file');\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_removeItem",
      "string": "_removeItem()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>@private</p>",
      "summary": "<p>@private</p>",
      "body": ""
    },
    "ignore": false,
    "code": "function _createDir(parentModel, mask) {\n\t\t\t\tvar name = mask.find('input[type=text]').val();\n\t\t\t\tthis.collection.createDir(name, parentModel).always(function () {\n\t\t\t\t\tmask.off('click', '.confirm');\n\t\t\t\t\tmask.remove();\n\t\t\t\t}).always(function (resp) {\n\t\t\t\t\tvar msg = new SysMessage(null, resp);\n\t\t\t\t});\n\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_createDir",
      "string": "_createDir()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _renderSubDirsOnUpdate(sub) {\n\t\t\t\tsub = sub instanceof Backbone.Model ? sub: this.collection.get(sub.directory.id);\n\t\t\t\treturn this.renderPart(sub);\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_renderSubDirsOnUpdate",
      "string": "_renderSubDirsOnUpdate()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _moveItemTo(event, ui) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tvar movedItem = ui.draggable,\n\t\t\t\ttype = /file-/.test(movedItem[0].className) ? 'file': 'dir',\n\t\t\t\tdestination = $(event.target).parent()[0].id,\n\t\t\t\t// the directory the item gets moved to\n\t\t\t\tsource = type === 'file' ? movedItem.parents().filter('li.dir')[0].id: movedItem.parent()[0].id,\n\t\t\t\tfile = type === 'file' ? movedItem[0].id.substr(5) : undefined;\n\n\t\t\t\tthis.collection.moveItem({\n\t\t\t\t\ttype: type,\n\t\t\t\t\tdestination: destination,\n\t\t\t\t\tsource: source,\n\t\t\t\t\tfile: file\n\t\t\t\t});\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_moveItemTo",
      "string": "_moveItemTo()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "summary": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _itemDelegateMoveable(event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tvar target;\n\t\t\t\tif (!/draggable/.test(event.target.className)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttarget = $(event.target);\n\t\t\t\ttarget.draggable({\n\t\t\t\t\trevert: true,\n\t\t\t\t\trevertDuration: 120,\n\t\t\t\t\tcursor: 'move',\n\t\t\t\t\taxis: 'y',\n\t\t\t\t\thandle: '.move',\n\t\t\t\t\topacity: 0.7,\n\t\t\t\t\tsnap: true,\n\t\t\t\t\tzIndex: 2700,\n\t\t\t\t\tscope: 'moveable'\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_itemDelegateMoveable",
      "string": "_itemDelegateMoveable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "summary": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _itemDelegateDroppable(event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tvar target;\n\t\t\t\tif (!/droppable/.test(event.target.className)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttarget = $(event.target).add('.droppable');\n\t\t\t\ttarget.droppable({\n\t\t\t\t\tdrop: _.bind(_moveItemTo, this),\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\thoverClass: 'dropover',\n\t\t\t\t\tscope: 'moveable'\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_itemDelegateDroppable",
      "string": "_itemDelegateDroppable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _destroyDraggable() {\n\t\t\t\t$(this).draggable('destroy');\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_destroyDraggable",
      "string": "_destroyDraggable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _destroyDroppable() {\n\t\t\t\t$(this).droppable('destroy');\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_destroyDroppable",
      "string": "_destroyDroppable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _itemSetDraggable() {\n\t\t\t\tvar target = this.$el.find('.draggable:not(.ui-draggable)');\n\t\t\t\ttarget.draggable({\n\t\t\t\t\trevert: true,\n\t\t\t\t\trevertDuration: 120,\n\t\t\t\t\tcursor: 'move',\n\t\t\t\t\taxis: 'y',\n\t\t\t\t\thandle: '.move',\n\t\t\t\t\topacity: 0.7,\n\t\t\t\t\tsnap: true,\n\t\t\t\t\tzIndex: 2700,\n\t\t\t\t\tscope: 'moveable'\n\t\t\t\t});\n\t\t\t\ttarget.on('destroyed', _destroyDraggable);\n\t\t\t\treturn this;\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_itemSetDraggable",
      "string": "_itemSetDraggable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _itemSetDroppable() {\n\t\t\t\tvar dirtree = this,\n\t\t\t\ttarget = this.$el.find('.droppable:not(.ui-droppable)');\n\n\t\t\t\ttarget.droppable({\n\t\t\t\t\tdrop: _.bind(_moveItemTo, this),\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\thoverClass: 'dropover',\n\t\t\t\t\tscope: 'moveable',\n\t\t\t\t\tover: function (event, ui) {\n\t\t\t\t\t\tvar parent = $(this).parent();\n\t\t\t\t\t\tif (!parent.hasClass('open')) {\n\t\t\t\t\t\t\t$(this).on('dropout', function (event, ui) {\n\t\t\t\t\t\t\t\tconsole.log('closing');\n\t\t\t\t\t\t\t\tdirtree.closeDir(parent);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdirtree.openDir(parent);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t});\n\t\t\t\ttarget.on('destroyed', _destroyDroppable);\n\t\t\t\treturn this;\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_itemSetDroppable",
      "string": "_itemSetDroppable()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "summary": "<ul>\n<li>@private\n         * @deprecated</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _ensureDelegates() {\n\t\t\t\tthis.$el.find('.draggable:not(.ui-draggable)').trigger('mouseenter').end().find('.droppable:not(.ui-droppable)').trigger('mouseenter');\n\t\t\t}",
    "ctx": {
      "type": "function",
      "name": "_ensureDelegates",
      "string": "_ensureDelegates()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@private</li>\n</ul>",
      "summary": "<ul>\n<li>@private</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "function _handleMetaStates(model) {\n\t\t\t\tvar fnames = _.keys(metaStates[this.collection.cid]),\n\t\t\t\tf,\n\t\t\t\tmeta,\n\t\t\t\tfiles = [],\n\n\t\t\t\tdir = this.getDirViewByModel(model);\n\n\t\t\t\tif (!fnames.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_.each(fnames, function (path) {\n\t\t\t\t\tf = dir.getFileByPath(path);\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\tmeta = MetaView.makeView.call(f);\n\t\t\t\t\t\tmeta.open(true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Backbone.View.extend({\n\t\t\t\tevents: {\n\t\t\t\t\t//'click .dir-toggle':  'toggleDir',\n\t\t\t\t\t'click.dritree .toolbar': 'tasks',\n\t\t\t\t\t'click.dirtree .dir-header': 'toggleDir',\n\t\t\t\t\t'click.dirtree .file:not(.selected) > .text': 'select',\n\t\t\t\t\t'click.dirtree .file.selected > .text': 'unselect',\n\t\t\t\t\t'click.dirtree .file > .toolbar > .delete': 'deleteFile',\n\t\t\t\t\t'click.dirtree .dir-header > .toolbar > .delete': 'deleteDir',\n\t\t\t\t\t'click.dirtree .dir-header > .toolbar > .create': 'createDir',\n\t\t\t\t\t//'mouseenter.dirtree .draggable:not(.ui-draggable)': _itemDelegateMoveable,\n\t\t\t\t\t//'mouseover.dirtree .droppable:not(.ui-droppable)': _itemDelegateDroppable\n\t\t\t\t},\n\n\t\t\t\tinitialize: function () {\n\t\t\t\t\tthis.collection = new Dirs();\n\t\t\t\t\tthis.dirViews = {};\n\t\t\t\t\tthis.collection.addSetting('field_id', this.options.field_id);\n\t\t\t\t\tthis.collection.populate();\n\t\t\t\t\tthis.collection.deferred.done(_.bind(this.render, this));\n\t\t\t\t\t//this.collection.on('itemdelete', _.bind(_removeItemNode, this));\n\t\t\t\t\tthis.collection.on('add', _.bind(this.renderPart, this));\n\t\t\t\t\tthis.collection.on('remove', _.bind(_removeItem, this));\n\t\t\t\t\tthis.collection.on('update', _.bind(_handleMetaStates, this));\n\t\t\t\t\tmetaStates[this.collection.cid] = {};\n\t\t\t\t\t//this.on('update', _.bind(_ensureDelegates, this));\n\t\t\t\t},\n\n\t\t\t\ttasks: function (e) {\n\t\t\t\t\tvar parentId = $(e.target).parents().filter('li').find('ul')[0].id.substr(4),\n\t\t\t\t\ttask = e.target.className.split(' ')[1];\n\t\t\t\t\tthis.trigger(task, this.collection.get(parentId));\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\tselect: function (e) {\n\t\t\t\t\t_select.call(this, e, 'add');\n\t\t\t\t},\n\n\t\t\t\tunselect: function (e) {\n\t\t\t\t\t_select.call(this, e, 'remove');\n\t\t\t\t},\n\n\t\t\t\tselectById: function (id) {\n\t\t\t\t\tthis.filesById(id).addClass('selected');\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\tunselectById: function (id) {\n\t\t\t\t\tthis.filesById(id).removeClass('selected');\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\tfilesById: function (ids) {\n\t\t\t\t\treturn this.$el.find(_.isArray(ids) ? ('#file-' + ids.join(', #file-')) : '#file-' + ids);\n\t\t\t\t},\n\n\t\t\t\tgetFile: function (node) {\n\t\t\t\t\tvar id = node.parent()[0].id.substr(4);\n\t\t\t\t\treturn this.collection.getFile(node[0].id.split('file-')[1], id);\n\t\t\t\t},\n\t\t\t\tconfirm: function (message) {\n\t\t\t\t\treturn confirm(message);\n\t\t\t\t},\n\n\t\t\t\tdeleteDir: function (event) {\n\t\t\t\t\tvar dir = this.collection.get($(event.target).parents().filter('.dir')[0].id);\n\t\t\t\t\tvar message = Symphony.Language.get(SysMessage.confirm_directory_deletion, {\n\t\t\t\t\t\t'dir': dir.get('name'),\n\t\t\t\t\t\t'dir2': dir.get('name'),\n\t\t\t\t\t\t'dircount': dir.get('subdirs') ? dir.get('subdirs').length: 0,\n\t\t\t\t\t\t'filecount': dir.get('files') ? dir.get('files').models.length: 0\n\t\t\t\t\t});\n\n\t\t\t\t\tif (this.confirm(message)) {\n\t\t\t\t\t\tthis.collection.deleteItem(dir, 'dir');\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tdeleteFile: function (event) {\n\t\t\t\t\tvar t = $(event.target),\n\t\t\t\t\tfileNode = t.parents().filter('.file'),\n\t\t\t\t\tparentNode = fileNode.parent(),\n\t\t\t\t\tfile = this.getFile(fileNode);\n\n\t\t\t\t\tvar message = Symphony.Language.get(SysMessage.confirm_file_deletion, {\n\t\t\t\t\t\t'file': 'test'\n\t\t\t\t\t});\n\n\t\t\t\t\tif (this.confirm(message)) {\n\t\t\t\t\t\tthis.collection.deleteItem(file, 'file');\n\t\t\t\t\t\t//_select.call(this, {target: t.parent()[0]}, 'remove');\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tcreateDir: function (event) {\n\t\t\t\t\tvar target = $(event.target),\n\t\t\t\t\tdir = this.collection.get(target.parents().filter('.dir')[0].id),\n\t\t\t\t\tcompiled = $(templates.newdir({\n\t\t\t\t\t\tparent: dir.get('path'),\n\t\t\t\t\t\tlevel: ~~dir.get('level') + 1\n\t\t\t\t\t}));\n\t\t\t\t\t$('#sub-' + dir.id).prepend(compiled);\n\t\t\t\t\tthis.openDir(target.parents().filter('.dir'));\n\t\t\t\t\tcompiled.on('click', '.add', _.bind(_createDir, this, dir, compiled));\n\t\t\t\t\tcompiled.on('click', '.cancel', function () {\n\t\t\t\t\t\tcompiled.remove();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\ttoggleDir: function (event) {\n\t\t\t\t\tvar target, subdir, toggle, trigger, toggle;\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\n\t\t\t\t\ttarget = $(event.target).parents().filter('.dir:not(#dir-list-root)').first();\n\t\t\t\t\tsubdir = target.find('> .sub-dir');\n\t\t\t\t\ttrigger = target.hasClass('open') ? 'close': 'open';\n\t\t\t\t\ttoggle = trigger === 'open' ? 'openDir': 'closeDir';\n\n\t\t\t\t\tthis[toggle](target);\n\t\t\t\t\t//this.trigger('toggle', trigger);\n\t\t\t\t},\n\n\t\t\t\topenDir: function (node) {\n\t\t\t\t\tnode.find('> .sub-dir').slideDown();\n\t\t\t\t\tnode.addClass('open');\n\t\t\t\t\tthis.collection.get(node[0].id).set('state', 'open');\n\t\t\t\t},\n\n\t\t\t\tcloseDir: function (node) {\n\t\t\t\t\tnode.find('> .sub-dir').slideUp();\n\t\t\t\t\tnode.removeClass('open');\n\t\t\t\t\tthis.collection.get(node[0].id).set('state', 'close');\n\t\t\t\t},\n\n\t\t\t\tenableTask: function (task, dir) {\n\t\t\t\t\tthis.dirViews[dir.id].trigger('enabletask', task);\n\t\t\t\t},\n\n\t\t\t\tdisableTask: function (task, dir) {\n\t\t\t\t\tthis.dirViews[dir.id].trigger('disabletask', task);\n\t\t\t\t},",
    "ctx": {
      "type": "function",
      "name": "_handleMetaStates",
      "string": "_handleMetaStates()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>Renders a directory branch\n             * @param {Object: Backbone.Model Instance} model the directory model</li>\n</ul>",
      "summary": "<ul>\n<li>Renders a directory branch\n             * @param {Object: Backbone.Model Instance} model the directory model</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "renderPart: function (model) {\n\t\t\t\t\tvar dir, update = this.dirViews[model.id] ? true: false;\n\n\t\t\t\t\tif (!update) {\n\t\t\t\t\t\tdir = new DirView({\n\t\t\t\t\t\t\ttagName: 'li',\n\t\t\t\t\t\t\tid: model.id,\n\t\t\t\t\t\t\tclassName: 'dir level-' + model.get('level'),\n\t\t\t\t\t\t\tmodel: model\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.dirViews[model.id] = dir;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdir = this.dirViews[model.id];\n\t\t\t\t\t\tdir.model = model;\n\t\t\t\t\t}\n\t\t\t\t\tdir.render(this.options.dirSettings, this.options.fileSettings, update);\n\t\t\t\t\tif (update && _.isArray(model.get('subdirs'))) {\n\t\t\t\t\t\t_.each(model.get('subdirs'), _.bind(_renderSubDirsOnUpdate, this));\n\t\t\t\t\t}\n\t\t\t\t\tupdate && this.trigger('update', dir);\n\n\t\t\t\t\t_itemSetDraggable.call(this);\n\t\t\t\t\t_itemSetDroppable.call(this);\n\t\t\t\t},"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>starts the initial render process.<br />This is nomaly done once</p>",
      "summary": "<p>starts the initial render process.<br />This is nomaly done once</p>",
      "body": ""
    },
    "ignore": false,
    "code": "render: function () {\n\t\t\t\t\tvar view = this;\n\t\t\t\t\tthis.el.innerHTML = templates.dirtree({\n\t\t\t\t\t\tname: this.options.baseName\n\t\t\t\t\t});\n\t\t\t\t\tthis.collection.each(_.bind(this.renderPart, this));\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "DirView"
        ],
        "name": "Instance}",
        "description": "dir"
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "deep",
        "description": "pass true to get all nested subdirs"
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "all DirView instances that are subdirs of the given DirView"
      }
    ],
    "description": {
      "full": "<p>Fetches all DirView instances<br />from a given DirView instance</p>",
      "summary": "<p>Fetches all DirView instances<br />from a given DirView instance</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "getSubdirsFromView: function (dir, deep) {\n\t\t\t\t\tvar tree = this,\n\t\t\t\t\tsubdirs = dir.model.get('subdirs'),\n\t\t\t\t\tres = [];\n\n\t\t\t\t\tif (subdirs) {\n\t\t\t\t\t\t_.each(subdirs, function (d) {\n\t\t\t\t\t\t\tconsole.log('--- res ---: ', d.id);\n\t\t\t\t\t\t\tconsole.log('--- res ---: ', _.clone(tree.dirViews));\n\t\t\t\t\t\t\tif (tree.dirViews[d.id]) {\n\t\t\t\t\t\t\t\tres.push(tree.dirViews[d.id]);\n\t\t\t\t\t\t\t\tif (deep && d.get('subdirs')) {\n\t\t\t\t\t\t\t\t\tres.push.apply(res, tree.getSubdirsFromView(tree.dirViews[d.id], true));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn res;\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "TreeView#getDirViewByModel"
      },
      {
        "type": "param",
        "types": [
          "Object:Directory"
        ],
        "name": "Instance}",
        "description": "dir a given directory model"
      },
      {
        "type": "return",
        "types": [
          "Mixed"
        ],
        "description": "DirView Instance or undefined"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>get a DirView Instance form<br />by passing in a directory model</p>",
      "summary": "<p>get a DirView Instance form<br />by passing in a directory model</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "getDirViewByModel: function (dir) {\n\t\t\t\t\treturn this.dirViews[dir.id];\n\t\t\t\t},"
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "TreeView#getDirViewById"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "id",
        "description": "directory id"
      },
      {
        "type": "return",
        "types": [
          "Mixed"
        ],
        "description": "DirView Instance or undefined"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>get a DirView Instance form<br />by passing in a directory id</p>",
      "summary": "<p>get a DirView Instance form<br />by passing in a directory id</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "getDirViewById: function (id) {\n\t\t\t\t\treturn this.dirViews[id];\n\t\t\t\t}\n\t\t\t});\n\t\t} ());\n\n\t\treturn TreeView;\n\t});\n} (this, this.Symphony, this.define));"
  }
]